Ioc 란?
->제어의 역전을 의미한다.

구현 객체가 프로그램의 제어흐름을 조종하는 것을 의마한다. 
ex) 클라이언트 객체가 조종하던 흐름을 AppConfig 가 가져왔다.

간단히 생각하면, 이제는 수도가 흐르는 관이 다음 방향도 직접 결정하였는데
이제는 그 흐름만을 중앙 컨트롤 하는 중앙 관리 프로그램, AppConfig 가 있다는 것이다.
해당 수도관은 이제 물이 이동하는 그 자체만을 담당한다.


### 프레임 워크 vs 라이브러리 ###

프레임 워크는 해당 프레임워크가 나의 코드와 제어권을 가져가면 프레임 워크이다.
반대로, 내가 코드의 제어권을 가져가면 라이브러리이다.



### 의존관계 주입 ###
이제 해당 수도관의 기능(인터페이스)만 알고, 
실제로 어떤 회사(?) 의 수도관이 사용될 건지만 지정해주면 된다.

이때 이걸 사전에 지장해주는걸 정적인 의존관계 주입,
실행시키고 나서 인스턴스끼리 지정되는 걸 동적인 의존관계 주입이라고 한다.

정적인 의존관계는 App 을 실행하지 않아도 의존관계를 알 수 있다.

우리 예제에서는
interface 를 의존하고 있다는 것을 알고 있지만
이것은 추상 인터페이스 이므로 실제 어떤 객체가 의존관계게 될지는
App이 실행되어 AppConfig 를 읽기 전까지는 알 수 없다.-> 동적 객체 의존 관계

이때 동적으로 런타임때 의존관계가 구현되는 것을 D.I(의존관계 주입) 이라고 한다.

@@ D.I 를 사용하면, 정적 의존관계를 바꾸지 않고, 동적인 객체 인스턴스 의존관계를 변경가능하다.


IOC 컨테이너, DI 컨테이너란?
AppConfig 의 역할을 그동안 봐왔을 것이다. 해당 역할을 해주는 것을 IOC 컨테이너 DI 컨테이너라고 한다.


제어의 흐름을 가져오고,
의존관계의 주입(D.I)을 해주는 쉨

그게 바로 IOC, DI 컨테이너라고 한다.



############ 스프링으로 교체해보기 ###########

AppConfig 
위에 @Configuration 이라는 컴포넌트를 붙여주고,

아래 구성 정보를 연결하는데에 @Bean 이라는 컴포넌트를 붙여주면 알아서 Spring이 인식된다.

이때 이 자동으로 구성시켜주는걸 Spring Container 이라고 한다.


 ApplicationContext applicationContext = new AnnotationConfigApplicationContext(AppConfig.class);
[인터페이스명] [인스턴스 명] = applicationContext.getBean("[AppConfig 내 메소드명 ]", MemberService.class);

와 같이 사용한다.
(이는 AppConfig 를 각 앱에 넣어준 것과 비슷한 역할을 해준다.)

ApplicationContext를 스프링 컨테이너라고 한다.


@Configuration 이 붙어있는 AppConfig 를 가지고 컨테이너에 등록시키는데
@Bean 이라 적힌 메소드 (AppConfig 안에 있는 )를 모두 호출한다.
-> 반환된 객체를 컨테이너에 등록해 놓는다. 
-> 이때 등록된 각 Bean 을 메소드 이름으로 사용한다.


?? Spring 을 사용하는 장점이 무엇인가?
=> 앞으로 공부해 나갈 것이다.






