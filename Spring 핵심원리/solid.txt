SOLID

SRP 단일 책임 원칙
 - 한개의 클래스는 하나의 책임만을 가지는 것을 의미한다.
    -> 하나의 책임? 
 - 변경이 있을 때 파급효과가 작으면 SRP 를 잘 따른 것.
 - 적당한 크기로 객체를 잘 쪼개야하는 것. 너무 작아서도 커서도 안된다.

OCP 개방 폐쇄원칙
  -  확장에는 열려 있으나, 변경에는 닫혀 있어야한다.
  -  인터페이스를 활용한 오버라이딩으로 기능을 확장할 수는 있지만, 해당 인터페이스 자체는 변경하면 안된다는 뜻...?
  -  이때 입문 수업 때 했던 것처럼 레퍼지토리를 바꾸는 거는 ... 변경인가? ( 맞음 )
  -  이것을 컨테이너를 통해 해결하나? spring bean 을 이용한 의존관계 설정이랑 관련이 있을까? (추후 수업에서 해결해줄 예정)

LSP
  - 인터페이스 규약을 맞추고, 해당 규약을 보장해야하는 기능. (엑셀)

ISP
 - 여러 인터페이스를 통합하는 것보다, 세부 인터페이스로 나누는게 낫다. ( 각 기능별로)
 - 게임 인터페이스와 프로그램 인터페이스는 나누는게 낫다.


DIP 의존관계 역전원칙
  - 추상화(역할)에 의존해야한다는 것 구현에 의존해서는 안된다.
  - 다른 인터페이스가 어떠한 역할을 하는지만 중요하지, 세부사항, 구현 방법등은 몰라도 된다.
  - 스마트폰을 사용할 줄 알아야지, 사용할 때 모든 작동 원리를 몰라도 된다. 
  - 이메일을 보내는 방법을 알아야지, HTTP 등 통싱 방법을 알지 못하도 된다.
  - 입문 강의에서 직접적으로 어떤 인터페이스를 확장한 특정 레퍼지토리를 사용하는지 직접 지정하는 것은 좋지 않다.
  - 어떠한 클래스를 사용할지, 직접 지정해줄 이유가 없다는 뜻

=> 다형성 만으로는 OCP DIP 를 지킬 수 없다.


