프로토타입 빈 요청
-> 요청이 들어오면, 객체를 생성하고, 의존관계를 주입, 초기화 한 다음 전달한다.
-> 그러나, 컨테이너에 보관하지 않는다.
-> 따라서, 요청이 들어올 때마다 새로운 객체를 생성해서 반환한다.

프토로타입으로 하면 close 가 호출되지 않는다.
-> 그 이유는 클라이언트 가 close 를 담당하지 프로토타입의 역할이 아니기 때문.

이 프로토타입을 싱글톤 빈과 같이 사용하게 된다면,
매번 다른 객체를 반환해야하는 프로토타입의 성질과 달리

싱글톤 빈에서 주입받은 프로토타입도 싱글톤 처럼 하나의 객체를 주입받을 때 그대로 유지하는 것이다.
-> 예전에 그래서 내부 저장을 하지 말라고 배웠는데, 이건 사실상 내부 저장 인 것 아닌가?
-> 그냥 임시로 사용하고 싶은 service 같은 느낌?

아... 프로토타입 빈을 사용하고 싶을 때,
대부분 spring 은 싱글톤 빈을 사용하므로 프로토타입빈을 사용할 경우 그 안에서 쓰게 될 확률이 높다.


## 해결법 ##

1. 로직을 호출 할때마다 새로운 포로토타입 빈을 호출하여 받는다.
-> DL 이라고한다. (Dependency Lookup)

2. 이를 그냥 private 로만 선언하는게아니라
private ObjectProvider<타입> 변수명;
이라고 붙여서 선언해준다.

변수명.getObject(); 로 받아서 사용가능하다.
이렇게 받은 건 <> 에 입력한 타입 이 반환된다.

-> 여전히Spring 에 의존적이기는 하다.

3. JSR-330 Provider
-> 스프링에 의존하지 않고 java 표준 을 사용하는 방법이다.
-> 대신 라이브러리를 gradle 에 추가해주어야한다.
dependancy 에
implementation 'jakarta.inject:jakarta.inject-api:2.0.1' 추가

이후
private Provider<타입> 변수명; //javax inject 타입이어야함.

.get() 메소드로 탐색


$$$ 만약 해당 서비스를 다른 컨테이너에서도 사용해야한다면, java 를 사용하는 3번 방법,
아니라면 2번 방법을 사용한다.