스프링 컨테이너가 생성되는 과정

new AnnotationConfigApplicationContext에서
ApplicationContext 는 인터페이스이고, AnnotationConfigApplication 이 해당 인터페이스를 확장한 클래스이다.

앞에 Annotation 은 어떠한 기반으로 컨테이너를 구성할지 물어보는 것이다.
Annotain 말고 XML 방식 또한 존재한다.

@Configuration 으로 AppConfig.class 를 생성하게 되면
스플이 컨테이너가 생성된다.

이 스프링 컨테이너 안에는 스프링 빈 저장소가 존재하는데,
이 안의 내용을 AppConfig.class 를 구성 정보로 지정하여
AppConfig 안의 메소드들을 가져오는데 사용한다.\

AppConfig 안의 메소드들을 다 가져오는 것이 아니라 @Bean 이 등록된 메소드들 만 가져오게 된다.
이때의 Bean 이름은 메소드의 이름이고 Bean 객체는 해당 메소드로 반환되는 인스턴스를 의미한다.

@@ 이때 빈의 이름을 따로 직접 설정할 수도 있는데, 중복 빈의 이름은 항상 다르게 만들어야한다.

이렇게 가져온 빈 이름과 빈 객체를 가지고, 의존 관계를 컨테이너 안에서 설정해준다. ( 동적인 의존관계 주입)

@@@@ 싱글톤 컨테이너 에서 추가 설명 ( 일반 자바 호출과 스프링 빈의 차이가 있다.)

-> 자바로 호출하게 된다면, 생성과 의존관계가 한번에 합쳐서 실행되고, 연결된다.
-> 스프링 빈으로 호출하게 된다면 생성과 의존관계 연결이 각각 따로 등록된다.

Appconfig 안의 모든 Bean 을 String[] 으로 받아서 출력을 찍어보게 된다면,
AppConfig 역시 Bean 으로 등록되어 있음을 알 수가 있다.



 //Role ROLE_APPLICATION: 직접 등록한 애플리케이션 빈
 //Role ROLE_INFRASTRUCTURE: 스프링이 내부에서 사용하는 빈


BeanDefinition beanDefinition  = ac.getBeanDefinition(beanDefinitionName);
getRole() 해서 가져온 값과 BeanDefinition.ROLE_APPLICATION 을 비교해서
내가 등록한 Application Bean 인지 체크한다.





### 스프링 빈 조회하는 방법 ###


(ApplicationContextBasicFindTest.java 파일)
이름으로 조회할 수도 있고, 타입으로도 조회가 가능하다.
ac.getBean("Bean명", Bean타입.class)로 가져올 수 있다.
이때 MemberService 와 같은 인터페이스가 아닌,
MemberServiceImpl 과 같이 구체 타입으로 조회도 역시 가능하다.


또한 Bean 명을 입력하지 않고 Bean 타입만으로도 검색이 가능하다.
이때, 해당 타입을 가지고 있는 Bean이 이름이 달라도 2개이상이 있으면 오류가 발생한다.
따라 이때에는 for 문을 써서 루프문을 돌려야한다.
(ApplicationContextSameBeanFindTest.java 파일)

하지만 이는 테스트시 AppConfig 에서 연결해준 구체타입이 변경될 경우 코드를 수정해주어야한다.


(ApplicationContextExtendsFindTest.java 파일)
스프링 빈 조회시 부모 클래스를 부르면 자식 클래스들이 다 딸려 나온다.
이때 최고 부모인 Objet 타입으로 조회한다면 따라, 모든 Bean 들을 조회 할 수 있다.

부모의 타입으로 조회시 자식이 둘 이상 있으면 중복 오류가 발생할 수 있다.
따라 이때에는 for 문을 써서 루프문을 돌려야한다.




ApplicationContext 는
BeanFactory 에 더불어, 여러 기능들을 제공하는 인터페이스들을 다중 상속 받아 
다양한 기능을 제공한다. 

스프링 컨테이너에서 XML 을 AppConfig에 스프링 Bean 대신 사용한다면,
레거시 코드들 (XML) 유지보수 할 수 있고,
설정을 XML 파일 교체만으로 가능하다는 장점이 있다.


이를 통해 알 수 있는 점 
-> 스프링 컨테이너의 BeanDefinition이 .class 혹은 .xml 등 어떤 것이든지 BeanDefinition 의 기능에만 의존한다.
xml 은 GenericXmlApplicationContext이,
class 는 AnnotationConfigApplicationContext 가 메타데이터를 
BeanDefinition 에 저장해주는 것이다.













