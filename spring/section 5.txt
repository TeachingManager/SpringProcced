객체를 한개만 생성한 후 공유하도록 셜계 
-> 싱글톤 패턴
클래스의 인스턴스가 딱 1개만 생성되는것을 보장하는 디자인 패턴
객체 인스턴스를 2개 이상 생성하지 못하도록 막아야한다
private 생성자를 사용해서 외부에서 임의로 new 키워드를 사용하지 못하도록

-싱글톤 패턴 문제점
싱글톤 패턴을 구현하는 코드 자체가 많이 들어간다.
의존관계상 클라이언트가 구체 클래스에 의존한다. DIP를 위반한다.
클라이언트가 구체 클래스에 의존해서 OCP 원칙을 위반할 가능성이 높다.
테스트하기 어렵다.
내부 속성을 변경하거나 초기화 하기 어렵다.
private 생성자로 자식 클래스를 만들기 어렵다.
결론적으로 유연성이 떨어진다.
안티패턴으로 불리기도 한다.

스프링 컨테이너는 객체 인스턴스를 싱글톤으로 관리한다.

여러 클라이언트가 하나의 같은 객체 인스턴스를 공유하기 때문에 싱글톤 객체는 상태를 유지(stateful)하게 설계x
무상태(stateless)로 설계
특정 클라이언트에 의존적인 필드x
특정 클라이언트가 값을 변경할 수 있는 필드x
가급적 읽기만
필드 대신에 자바에서 공유되지 않는, 지역변수, 파라미터, ThreadLocal 등을 사용.
스프링 빈의 필드에 공유 값을 설정하면 정말 큰 장애가 발생할 수 있다